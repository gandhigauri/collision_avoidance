footprint: [[-0.325, -0.325], [-0.325, 0.325], [0.325, 0.325], [0.46, 0.0], [0.325, -0.325]]
controller_frequency: 10.0
controller_patience: 15.0
clearing_radius: 0.59
footprint_padding: 0.015

CollvoidLocalPlanner:
  max_neighbors: 10
  neighbor_dist: 15.0
  time_horizon: 10.0
  time_horizon_obst: 10.0
  threshold_last_seen: 1.0

  scale_radius_factor: 0.5

  yaw_goal_tolerance: 0.20
  xy_goal_tolerance: 0.10
  #  latch_xy_goal_tolerance: true
  global_frame: /map

  holo_robot: true
  delete_observations: true

  max_vel_x: 0.5
  max_vel_th: 1.0
  min_vel_x: 0.01
  min_vel_th: 0.1
  min_vel_theta_inplace: 0.1
  min_vel_y: 0.01
  max_vel_y: 0.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5
  acc_lim_th: 3.2
  max_vel_with_obstacles: 0.5

  footprint_radius: 0.35
  inscribed_radius: 0.33

TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  acc_lim_th: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5

  #Set the velocity limits of the robot
  max_vel_x: 0.65
  min_vel_x: 0.1
  max_rotational_vel: 1.0
  min_in_place_rotational_vel: 0.4

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.1

  #For this example, we'll use a holonomic robot
  holonomic_robot: true

  #Since we're using a holonomic robot, we'll set the set of y velocities it will sample
  y_vels: [-0.3, -0.1, 0.1, -0.3]

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.1
  yaw_goal_tolerance: 0.05

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  sim_time: 1.7
  sim_granularity: 0.025
  vx_samples: 3
  vtheta_samples: 20

  #Parameters for scoring trajectories
  goal_distance_bias: 0.8
  path_distance_bias: 0.6
  occdist_scale: 0.01
  heading_lookahead: 0.325

  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: true

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.05

  #Eat up the plan as the robot moves along it
  prune_plan: true

DWAPlannerROS:
  acc_lim_th: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5

  max_vel_x: 0.65
  min_vel_x: 0.0

  max_vel_y: 0.1
  min_vel_y: -0.1

  max_trans_vel: 0.65
  min_trans_vel: 0.1

  max_rot_vel: 1.0
  min_rot_vel: 0.4

  sim_time: 1.7
  sim_granularity: 0.025

  goal_distance_bias: 32.0
  path_distance_bias: 24.0
  occdist_scale: 0.01

  stop_time_buffer: 0.2
  oscillation_reset_dist: 0.05

  forward_point_distance: 0.325

  scaling_speed: 0.25
  max_scaling_factor: 0.2

  vx_samples: 3
  vy_samples: 10
  vtheta_samples: 20

  sim_period: 0.1

  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.17

  rot_stopped_vel: 0.01
  trans_stopped_vel: 0.01

  
local_costmap:
  global_frame: odom_combined
  robot_base_frame: base_footprint
  update_frequency: 5.0
  publish_frequency: 2.0
  static_map: false
  rolling_window: true
  origin_x: 0.0
  origin_y: 0.0
  width: 6.0
  height: 6.0
  resolution: 0.05

  # BEGIN VOXEL STUFF

  map_type: voxel
  origin_z: 0.0
  z_voxels: 16
  z_resolution: 0.1125
  unknown_cost_value: 0
  unknown_threshold: 8
  mark_threshold: 0
  #END VOXEL STUFF

  transform_tolerance: 0.2
  obstacle_range: 2.5
  raytrace_range: 3.0
  inflation_radius: 0.55


  observation_sources: base_scan_marking base_scan tilt_scan ground_object_cloud

  base_scan_marking: {sensor_frame: base_laser_link, topic: /base_scan_marking, data_type: PointCloud, expected_update_rate: 0.2,
    observation_persistence: 0.0, marking: true, clearing: false, min_obstacle_height: 0.08, max_obstacle_height: 2.0}

  base_scan: {sensor_frame: base_laser_link, topic: /base_scan, data_type: LaserScan, expected_update_rate: 0.2,
               observation_persistence: 0.0, marking: false, clearing: true, min_obstacle_height: -0.10, max_obstacle_height: 2.0}

  tilt_scan: {sensor_frame: laser_tilt_link, topic: /tilt_scan, data_type: LaserScan, expected_update_rate: 0.2,
               observation_persistence: 0.2, marking: false, clearing: true, min_obstacle_height: -20.00, max_obstacle_height: 40.0}

  ground_object_cloud: {sensor_frame: laser_tilt_link, topic: /ground_object_cloud, data_type: PointCloud, expected_update_rate: 0.2,
                         observation_persistence: 4.6, marking: true, clearing: false, min_obstacle_height: -0.10, max_obstacle_height: 2.0}
  # END VOXEL STUFF

      
global_costmap:
  global_frame: map
  robot_base_frame: base_footprint
  update_frequency: 5.0
  publish_frequency: 0.0
  static_map: true
  rolling_window: false

  #BEGIN VOXEL STUFF
  map_type: voxel
  origin_z: 0.0
  z_voxels: 16
  z_resolution: 0.1125
  unknown_cost_value: 0
  unknown_threshold: 8
  mark_threshold: 0
  #END VOXEL STUFF

  transform_tolerance: 0.2
  obstacle_range: 2.5
  raytrace_range: 3.0
  inflation_radius: 0.55
  # BEGIN VOXEL STUFF
  observation_sources: base_scan_marking base_scan tilt_scan ground_object_cloud

  base_scan_marking: {sensor_frame: base_laser_link, topic: /base_scan_marking, data_type: PointCloud, expected_update_rate: 0.2,
    observation_persistence: 0.0, marking: true, clearing: false, min_obstacle_height: 0.08, max_obstacle_height: 2.0}

  base_scan: {sensor_frame: base_laser_link, topic: /base_scan, data_type: LaserScan, expected_update_rate: 0.2,
               observation_persistence: 0.0, marking: false, clearing: true, min_obstacle_height: -0.10, max_obstacle_height: 2.0}

  tilt_scan: {sensor_frame: laser_tilt_link, topic: /tilt_scan, data_type: LaserScan, expected_update_rate: 0.2,
               observation_persistence: 0.2, marking: false, clearing: true, min_obstacle_height: -20.00, max_obstacle_height: 40.0}

  ground_object_cloud: {sensor_frame: laser_tilt_link, topic: /ground_object_cloud, data_type: PointCloud, expected_update_rate: 0.2,
                         observation_persistence: 4.6, marking: true, clearing: false, min_obstacle_height: -0.10, max_obstacle_height: 2.0}
  # END VOXEL STUFF


recovery_behaviors:
  - name: 'super_conservative_reset'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'conservative_reset'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'aggressive_reset'
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'move_slow_and_clear'
    type: 'move_slow_and_clear/MoveSlowAndClear'

super_conservative_reset:
  reset_distance: 5.0

conservative_reset:
  reset_distance: 3.0

aggressive_reset:
  reset_distance: 1.84

move_slow_and_clear:
  clearing_distance: 0.5
  limited_trans_speed: 0.25
  limited_rot_speed: 0.45
  limited_distance: 0.3
