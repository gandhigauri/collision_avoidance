CollvoidLocalPlanner:
  holo_robot: true
  
  max_vel_x: 0.5
  max_vel_th: 1.0
  min_vel_x: 0.01
  min_vel_th: 0.1
  min_vel_y: 0.01
  max_vel_y: 0.2
  min_vel_th_inplace: 0.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5
  acc_lim_th: 3.2

  max_vel_with_obstacles: 0.5

  footprint_radius: 0.45

TrajectoryPlannerROS:
  #Set the acceleration limits of the robot
  acc_lim_th: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5

  #Set the velocity limits of the robot
  max_vel_x: 0.65
  min_vel_x: 0.1
  max_rotational_vel: 1.0
  min_in_place_rotational_vel: 0.4

  #The velocity the robot will command when trying to escape from a stuck situation
  escape_vel: -0.1

  #For this example, we'll use a holonomic robot
  holonomic_robot: true

  #Since we're using a holonomic robot, we'll set the set of y velocities it will sample
  y_vels: [-0.3, -0.1, 0.1, -0.3]

  #Set the tolerance on achieving a goal
  xy_goal_tolerance: 0.1
  yaw_goal_tolerance: 0.05

  #We'll configure how long and with what granularity we'll forward simulate trajectories
  sim_time: 1.7
  sim_granularity: 0.025
  vx_samples: 3
  vtheta_samples: 20

  #Parameters for scoring trajectories
  goal_distance_bias: 0.8
  path_distance_bias: 0.6
  occdist_scale: 0.01
  heading_lookahead: 0.325

  #We'll use the Dynamic Window Approach to control instead of Trajectory Rollout for this example
  dwa: true

  #How far the robot must travel before oscillation flags are reset
  oscillation_reset_dist: 0.05

  #Eat up the plan as the robot moves along it
  prune_plan: true

DWAPlannerROS:
  acc_lim_th: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5

  max_vel_x: 0.65
  min_vel_x: 0.0

  max_vel_y: 0.1
  min_vel_y: -0.1

  max_trans_vel: 0.65
  min_trans_vel: 0.1

  max_rot_vel: 1.0
  min_rot_vel: 0.4

  sim_time: 1.7
  sim_granularity: 0.025

  goal_distance_bias: 32.0
  path_distance_bias: 24.0
  occdist_scale: 0.01

  stop_time_buffer: 0.2
  oscillation_reset_dist: 0.05

  forward_point_distance: 0.325

  scaling_speed: 0.25
  max_scaling_factor: 0.2

  vx_samples: 3
  vy_samples: 10
  vtheta_samples: 20

  sim_period: 0.1

  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.17

  rot_stopped_vel: 0.01
  trans_stopped_vel: 0.01
    
local_costmap:
  global_frame: odom
  robot_base_frame: base_footprint
  update_frequency: 3.0
  publish_frequency: 2.0
  static_map: false
  rolling_window: true
  width: 4.0
  height: 4.0
  resolution: 0.025
  #For this example we'll configure the costmap in voxel-grid mode
  map_type: voxel

  #Voxel grid specific parameters
  origin_z: 0.0
  z_resolution: 0.2
  z_voxels: 10
  unknown_threshold: 9
  mark_threshold: 0

  #Set the tolerance we're willing to have for tf transforms
  transform_tolerance: 0.3

  #Obstacle marking parameters
  obstacle_range: 2.5
  max_obstacle_height: 2.0
  raytrace_range: 3.0

  #The footprint of the robot and associated padding
  footprint: [[-0.325, -0.325], [-0.325, 0.325], [0.325, 0.325], [0.46, 0.0], [0.325, -0.325]]
  footprint_padding: 0.01

  #Cost function parameters
  inflation_radius: 0.55
  cost_scaling_factor: 10.0

  #The cost at which a cell is considered an obstacle when a map is read from the map_server
  lethal_cost_threshold: 100

  #Configuration for the sensors that the costmap will use to update a map
  observation_sources: base_scan
  base_scan: {data_type: LaserScan, expected_update_rate: 0.4,
  observation_persistence: 0.0, marking: true, clearing: true, max_obstacle_height: 0.4, min_obstacle_height: 0.02}
  
global_costmap:
  global_frame: /map
  robot_base_frame: base_footprint
  update_frequency: 3.0
  publish_frequency: 0.0
  static_map: true
  
  #For this example we'll configure the costmap in voxel-grid mode
  map_type: voxel

  #Voxel grid specific parameters
  origin_z: 0.0
  z_resolution: 0.2
  z_voxels: 10
  unknown_threshold: 9
  mark_threshold: 0

  #Set the tolerance we're willing to have for tf transforms
  transform_tolerance: 0.3

  #Obstacle marking parameters
  obstacle_range: 2.5
  max_obstacle_height: 2.0
  raytrace_range: 3.0

  #The footprint of the robot and associated padding
  footprint: [[-0.325, -0.325], [-0.325, 0.325], [0.325, 0.325], [0.46, 0.0], [0.325, -0.325]]
  footprint_padding: 0.01

  #Cost function parameters
  inflation_radius: 0.55
  cost_scaling_factor: 10.0

  #The cost at which a cell is considered an obstacle when a map is read from the map_server
  lethal_cost_threshold: 100

  #Configuration for the sensors that the costmap will use to update a map
  observation_sources: base_scan
  base_scan: {data_type: LaserScan, expected_update_rate: 0.4,
  observation_persistence: 0.0, marking: true, clearing: true, max_obstacle_height: 0.4, min_obstacle_height: 0.02}
